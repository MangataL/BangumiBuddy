// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package downloader is a generated GoMock package.
package downloader

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteTorrent mocks base method.
func (m *MockInterface) DeleteTorrent(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTorrent", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTorrent indicates an expected call of DeleteTorrent.
func (mr *MockInterfaceMockRecorder) DeleteTorrent(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTorrent", reflect.TypeOf((*MockInterface)(nil).DeleteTorrent), ctx, hash)
}

// Download mocks base method.
func (m *MockInterface) Download(ctx context.Context, req DownloadReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockInterfaceMockRecorder) Download(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockInterface)(nil).Download), ctx, req)
}

// GetDownloadStatuses mocks base method.
func (m *MockInterface) GetDownloadStatuses(ctx context.Context, hashes []string) ([]DownloadStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadStatuses", ctx, hashes)
	ret0, _ := ret[0].([]DownloadStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadStatuses indicates an expected call of GetDownloadStatuses.
func (mr *MockInterfaceMockRecorder) GetDownloadStatuses(ctx, hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadStatuses", reflect.TypeOf((*MockInterface)(nil).GetDownloadStatuses), ctx, hashes)
}

// GetTorrentFileNames mocks base method.
func (m *MockInterface) GetTorrentFileNames(ctx context.Context, hash string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTorrentFileNames", ctx, hash)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTorrentFileNames indicates an expected call of GetTorrentFileNames.
func (mr *MockInterfaceMockRecorder) GetTorrentFileNames(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTorrentFileNames", reflect.TypeOf((*MockInterface)(nil).GetTorrentFileNames), ctx, hash)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

// MockTorrentOperator is a mock of TorrentOperator interface.
type MockTorrentOperator struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentOperatorMockRecorder
}

// MockTorrentOperatorMockRecorder is the mock recorder for MockTorrentOperator.
type MockTorrentOperatorMockRecorder struct {
	mock *MockTorrentOperator
}

// NewMockTorrentOperator creates a new mock instance.
func NewMockTorrentOperator(ctrl *gomock.Controller) *MockTorrentOperator {
	mock := &MockTorrentOperator{ctrl: ctrl}
	mock.recorder = &MockTorrentOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTorrentOperator) EXPECT() *MockTorrentOperatorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTorrentOperator) Delete(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTorrentOperatorMockRecorder) Delete(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTorrentOperator)(nil).Delete), ctx, hash)
}

// Get mocks base method.
func (m *MockTorrentOperator) Get(ctx context.Context, hash string) (Torrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, hash)
	ret0, _ := ret[0].(Torrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTorrentOperatorMockRecorder) Get(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTorrentOperator)(nil).Get), ctx, hash)
}

// List mocks base method.
func (m *MockTorrentOperator) List(ctx context.Context, filter TorrentFilter) ([]Torrent, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]Torrent)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTorrentOperatorMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTorrentOperator)(nil).List), ctx, filter)
}

// Save mocks base method.
func (m *MockTorrentOperator) Save(ctx context.Context, torrent Torrent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, torrent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTorrentOperatorMockRecorder) Save(ctx, torrent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTorrentOperator)(nil).Save), ctx, torrent)
}

// SetTorrentStatus mocks base method.
func (m *MockTorrentOperator) SetTorrentStatus(ctx context.Context, hash string, status TorrentStatus, detail string, opts *SetTorrentStatusOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTorrentStatus", ctx, hash, status, detail, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTorrentStatus indicates an expected call of SetTorrentStatus.
func (mr *MockTorrentOperatorMockRecorder) SetTorrentStatus(ctx, hash, status, detail, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTorrentStatus", reflect.TypeOf((*MockTorrentOperator)(nil).SetTorrentStatus), ctx, hash, status, detail, opts)
}
