// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go

// Package subscriber is a generated GoMock package.
package subscriber

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRSSParser is a mock of RSSParser interface.
type MockRSSParser struct {
	ctrl     *gomock.Controller
	recorder *MockRSSParserMockRecorder
}

// MockRSSParserMockRecorder is the mock recorder for MockRSSParser.
type MockRSSParserMockRecorder struct {
	mock *MockRSSParser
}

// NewMockRSSParser creates a new mock instance.
func NewMockRSSParser(ctrl *gomock.Controller) *MockRSSParser {
	mock := &MockRSSParser{ctrl: ctrl}
	mock.recorder = &MockRSSParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSSParser) EXPECT() *MockRSSParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockRSSParser) Parse(ctx context.Context, link string) (RSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, link)
	ret0, _ := ret[0].(RSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockRSSParserMockRecorder) Parse(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockRSSParser)(nil).Parse), ctx, link)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, rssLink string) (Bangumi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, rssLink)
	ret0, _ := ret[0].(Bangumi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, rssLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, rssLink)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, req ListBangumiReq) ([]Bangumi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]Bangumi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, req)
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, bangumi Bangumi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, bangumi)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, bangumi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, bangumi)
}

// StopSubscription mocks base method.
func (m *MockRepository) StopSubscription(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSubscription indicates an expected call of StopSubscription.
func (mr *MockRepositoryMockRecorder) StopSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSubscription", reflect.TypeOf((*MockRepository)(nil).StopSubscription), ctx, id)
}

// UpdateLastAirEpisode mocks base method.
func (m *MockRepository) UpdateLastAirEpisode(ctx context.Context, subscriptionID string, episode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastAirEpisode", ctx, subscriptionID, episode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastAirEpisode indicates an expected call of UpdateLastAirEpisode.
func (mr *MockRepositoryMockRecorder) UpdateLastAirEpisode(ctx, subscriptionID, episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastAirEpisode", reflect.TypeOf((*MockRepository)(nil).UpdateLastAirEpisode), ctx, subscriptionID, episode)
}

// MockRSSRecordRepository is a mock of RSSRecordRepository interface.
type MockRSSRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRSSRecordRepositoryMockRecorder
}

// MockRSSRecordRepositoryMockRecorder is the mock recorder for MockRSSRecordRepository.
type MockRSSRecordRepositoryMockRecorder struct {
	mock *MockRSSRecordRepository
}

// NewMockRSSRecordRepository creates a new mock instance.
func NewMockRSSRecordRepository(ctrl *gomock.Controller) *MockRSSRecordRepository {
	mock := &MockRSSRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRSSRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSSRecordRepository) EXPECT() *MockRSSRecordRepositoryMockRecorder {
	return m.recorder
}

// DeleteProcessed mocks base method.
func (m *MockRSSRecordRepository) DeleteProcessed(ctx context.Context, subscriptionID string, guid ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, subscriptionID}
	for _, a := range guid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProcessed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProcessed indicates an expected call of DeleteProcessed.
func (mr *MockRSSRecordRepositoryMockRecorder) DeleteProcessed(ctx, subscriptionID interface{}, guid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, subscriptionID}, guid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProcessed", reflect.TypeOf((*MockRSSRecordRepository)(nil).DeleteProcessed), varargs...)
}

// IsProcessed mocks base method.
func (m *MockRSSRecordRepository) IsProcessed(ctx context.Context, subscriptionID, guid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessed", ctx, subscriptionID, guid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProcessed indicates an expected call of IsProcessed.
func (mr *MockRSSRecordRepositoryMockRecorder) IsProcessed(ctx, subscriptionID, guid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessed", reflect.TypeOf((*MockRSSRecordRepository)(nil).IsProcessed), ctx, subscriptionID, guid)
}

// ListProcessedGUIDs mocks base method.
func (m *MockRSSRecordRepository) ListProcessedGUIDs(ctx context.Context, subscriptionID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProcessedGUIDs", ctx, subscriptionID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcessedGUIDs indicates an expected call of ListProcessedGUIDs.
func (mr *MockRSSRecordRepositoryMockRecorder) ListProcessedGUIDs(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcessedGUIDs", reflect.TypeOf((*MockRSSRecordRepository)(nil).ListProcessedGUIDs), ctx, subscriptionID)
}

// MarkProcessed mocks base method.
func (m *MockRSSRecordRepository) MarkProcessed(ctx context.Context, subscriptionID string, guid ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, subscriptionID}
	for _, a := range guid {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkProcessed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessed indicates an expected call of MarkProcessed.
func (mr *MockRSSRecordRepositoryMockRecorder) MarkProcessed(ctx, subscriptionID interface{}, guid ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, subscriptionID}, guid...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessed", reflect.TypeOf((*MockRSSRecordRepository)(nil).MarkProcessed), varargs...)
}
