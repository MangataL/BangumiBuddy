// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package subscriber is a generated GoMock package.
package subscriber

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AutoStopSubscription mocks base method.
func (m *MockInterface) AutoStopSubscription(ctx context.Context, id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoStopSubscription", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AutoStopSubscription indicates an expected call of AutoStopSubscription.
func (mr *MockInterfaceMockRecorder) AutoStopSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoStopSubscription", reflect.TypeOf((*MockInterface)(nil).AutoStopSubscription), ctx, id)
}

// DeleteSubscription mocks base method.
func (m *MockInterface) DeleteSubscription(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockInterfaceMockRecorder) DeleteSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockInterface)(nil).DeleteSubscription), ctx, id)
}

// Get mocks base method.
func (m *MockInterface) Get(ctx context.Context, id string) (Bangumi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(Bangumi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), ctx, id)
}

// GetRSSMatch mocks base method.
func (m *MockInterface) GetRSSMatch(ctx context.Context, subscriptionID string) ([]RSSMatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRSSMatch", ctx, subscriptionID)
	ret0, _ := ret[0].([]RSSMatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRSSMatch indicates an expected call of GetRSSMatch.
func (mr *MockInterfaceMockRecorder) GetRSSMatch(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRSSMatch", reflect.TypeOf((*MockInterface)(nil).GetRSSMatch), ctx, subscriptionID)
}

// GetSubscriptionCalendar mocks base method.
func (m *MockInterface) GetSubscriptionCalendar(ctx context.Context) (map[time.Weekday][]CalendarItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionCalendar", ctx)
	ret0, _ := ret[0].(map[time.Weekday][]CalendarItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionCalendar indicates an expected call of GetSubscriptionCalendar.
func (mr *MockInterfaceMockRecorder) GetSubscriptionCalendar(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionCalendar", reflect.TypeOf((*MockInterface)(nil).GetSubscriptionCalendar), ctx)
}

// HandleBangumiSubscription mocks base method.
func (m *MockInterface) HandleBangumiSubscription(ctx context.Context, subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBangumiSubscription", ctx, subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBangumiSubscription indicates an expected call of HandleBangumiSubscription.
func (mr *MockInterfaceMockRecorder) HandleBangumiSubscription(ctx, subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBangumiSubscription", reflect.TypeOf((*MockInterface)(nil).HandleBangumiSubscription), ctx, subscriptionID)
}

// List mocks base method.
func (m *MockInterface) List(ctx context.Context, req ListBangumiReq) ([]Bangumi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].([]Bangumi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInterfaceMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInterface)(nil).List), ctx, req)
}

// MarkRSSRecord mocks base method.
func (m *MockInterface) MarkRSSRecord(ctx context.Context, req MarkRSSRecordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRSSRecord", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRSSRecord indicates an expected call of MarkRSSRecord.
func (mr *MockInterfaceMockRecorder) MarkRSSRecord(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRSSRecord", reflect.TypeOf((*MockInterface)(nil).MarkRSSRecord), ctx, req)
}

// ParseRSS mocks base method.
func (m *MockInterface) ParseRSS(ctx context.Context, rssLink string) (ParseRSSRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRSS", ctx, rssLink)
	ret0, _ := ret[0].(ParseRSSRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRSS indicates an expected call of ParseRSS.
func (mr *MockInterfaceMockRecorder) ParseRSS(ctx, rssLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRSS", reflect.TypeOf((*MockInterface)(nil).ParseRSS), ctx, rssLink)
}

// StopSubscription mocks base method.
func (m *MockInterface) StopSubscription(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSubscription", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSubscription indicates an expected call of StopSubscription.
func (mr *MockInterfaceMockRecorder) StopSubscription(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSubscription", reflect.TypeOf((*MockInterface)(nil).StopSubscription), ctx, id)
}

// Subscribe mocks base method.
func (m *MockInterface) Subscribe(ctx context.Context, req SubscribeReq) (Bangumi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, req)
	ret0, _ := ret[0].(Bangumi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockInterfaceMockRecorder) Subscribe(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockInterface)(nil).Subscribe), ctx, req)
}

// UpdateLastAirEpisode mocks base method.
func (m *MockInterface) UpdateLastAirEpisode(ctx context.Context, subscriptionID string, episode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastAirEpisode", ctx, subscriptionID, episode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastAirEpisode indicates an expected call of UpdateLastAirEpisode.
func (mr *MockInterfaceMockRecorder) UpdateLastAirEpisode(ctx, subscriptionID, episode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastAirEpisode", reflect.TypeOf((*MockInterface)(nil).UpdateLastAirEpisode), ctx, subscriptionID, episode)
}

// UpdateSubscription mocks base method.
func (m *MockInterface) UpdateSubscription(ctx context.Context, req UpdateSubscribeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockInterfaceMockRecorder) UpdateSubscription(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockInterface)(nil).UpdateSubscription), ctx, req)
}
